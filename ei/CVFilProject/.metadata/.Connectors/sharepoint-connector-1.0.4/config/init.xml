<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
  ~
  ~ WSO2 Inc. licenses this file to you under the Apache License,
  ~ Version 2.0 (the "License"); you may not use this file except
  ~ in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~    http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing,
  ~ software distributed under the License is distributed on an
  ~ "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  ~ KIND, either express or implied.  See the License for the
  ~ specific language governing permissions and limitations
  ~ under the License.
  -->
<!-- Method Documentation URL: https://msdn.microsoft.com/en-us/library/azure/dn645542.aspx -->
<template name="init" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="apiUrl" description="Base endpoint URL of sharepoint API."/>
    <parameter name="accessToken"
               description="OAuth Token to read and manipulate data of sharepoint API."/>
    <parameter name="intervalTime" description="Accesstoken expiration time interval."/>
    <parameter name="resource" description="The App ID URI of the web API."/>
    <parameter name="refreshToken"
               description="RefreshToken to be used to obtain the access token."/>
    <parameter name="clientId"
               description="The value of your API Key given when you registered your application with sharepoint."/>
    <parameter name="clientSecret"
               description="The value of your secret key given when you registered your application with sharepoint."/>
    <parameter name="id" description="Realm id, This is a constant GUID for a site."/>
    <parameter name="redirectUri" description="The redirect url, that you passed to get code."/>
    <parameter name="registryPath"
               description="Registry Path of the Connector where the values are stored."/>
    <parameter name="blocking"
               description="The blocking parameter is helping connector performs the blocking invocations to Sharepoint."/>
    <sequence>
        <property name="uri.var.apiUrl" expression="$func:apiUrl"/>
        <property name="uri.var.accessToken" expression="$func:accessToken"/>
        <property name="uri.var.intervalTime" expression="$func:intervalTime"/>
        <property name="uri.var.resource" expression="$func:resource"/>
        <property name="uri.var.refreshToken" expression="$func:refreshToken"/>
        <property name="uri.var.clientId" expression="$func:clientId"/>
        <property name="uri.var.clientSecret" expression="$func:clientSecret"/>
        <property name="uri.var.redirectUri" expression="$func:redirectUri"/>
        <property name="uri.var.id" expression="$func:id"/>
        <property name="uri.var.registryPath" expression="$func:registryPath"/>
        <header name="Content-Type" value="application/json;odata=verbose" scope="transport"/>
        <header name="Accept" value="application/json;odata=verbose" scope="transport"/>
        <filter source="boolean($ctx:uri.var.refreshToken) and boolean($ctx:uri.var.clientSecret) and boolean($ctx:uri.var.clientId) and
                boolean($ctx:uri.var.accessToken) and boolean($ctx:uri.var.intervalTime) and boolean($ctx:uri.var.redirectUri) and boolean($ctx:uri.var.id)"
                regex="true">
            <then>
                <filter source="boolean($ctx:uri.var.registryPath)" regex="true">
                    <then>
                        <property name="uri.var.accessTokenRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/accessToken' )"/>
                        <property name="uri.var.timeRegistryPath"
                                  expression="fn:concat($ctx:uri.var.registryPath, '/time' )"/>
                    </then>
                </filter>
                <property name="uri.var.accessToken.reg"
                          expression="get-property('registry', $ctx:uri.var.accessTokenRegistryPath)"/>
                <property name="systemTime" expression="get-property('SYSTEM_TIME')"
                          scope="default"/>
                <filter source="$ctx:uri.var.accessToken.reg=''" regex="true">
                    <then>
                        <script language="js">
                            <![CDATA[
                            importPackage(Packages.org.apache.synapse.config);
                            var newAccess = mc.getProperty('uri.var.accessToken');
                            var newAccessRegistryPath = mc.getProperty('uri.var.accessTokenRegistryPath');
                            var newSysTime = mc.getProperty('systemTime');
                            var newTimeRegistryPath = mc.getProperty('uri.var.timeRegistryPath');
                            if(newAccess != null && newAccess != ''){
                                //Create the registry entry if no such entry exists.
                                mc.getConfiguration().getRegistry().newResource(newAccessRegistryPath,false);
                                mc.getConfiguration().getRegistry().updateResource(newAccessRegistryPath,newAccess);
                                mc.getConfiguration().getRegistry().newResource(newTimeRegistryPath, false);
                                mc.getConfiguration().getRegistry().updateResource(newTimeRegistryPath, newSysTime);
                            }
                            ]]>
                        </script>
                    </then>
                    <else>
                        <property name="uri.var.accessToken"
                                  expression="$ctx:uri.var.accessToken.reg"/>
                    </else>
                </filter>
                <property name="registryTime"
                          expression="get-property('registry', $ctx:uri.var.timeRegistryPath)"/>
                <script language="js"><![CDATA[
                    var time1 = mc.getProperty("systemTime");
                    var time2 = mc.getProperty("registryTime");
                    var timeTaken = time1 - time2;
                    mc.setProperty("INTERVAL_TIME", timeTaken);
                   ]]>
                </script>
                <property name="sharepointBlocking" expression="$func:blocking"/>
                <filter source="$ctx:INTERVAL_TIME &gt;$ctx:uri.var.intervalTime or $ctx:uri.var.accessToken=''"
                        regex="true">
                    <then>
                        <sharepoint.getAccessTokenFromRefreshToken/>
                    </then>
                </filter>
            </then>
        </filter>
        <header name="Authorization" expression="fn:concat('Bearer ', $ctx:uri.var.accessToken)"
                scope="transport"/>
    </sequence>
</template>